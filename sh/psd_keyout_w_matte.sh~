#!/bin/bash



set -e



echo "🎯 Removing white, detecting subject, and filling background behind it with a yellow-grey matte..."



# Check Python

if ! command -v python3 &>/dev/null; then

    echo "❌ Python3 is not installed."

    exit 1

fi



# Install Python dependencies if needed

python3 - <<EOF

try:

    import cv2

    import numpy

except ImportError:

    print("📦 Installing required packages...")

    import subprocess

    subprocess.check_call(["pip3", "install", "--user", "opencv-python", "numpy"])

EOF



# Process all jpg/jpeg files

for file in *.jpg *.jpeg; do

    if [ ! -f "$file" ]; then

        continue

    fi



    base="${file%.*}"

    output="${base}_internalmatte.png"



    echo "🎨 Processing: $file → $output"



    python3 - <<EOF

import cv2

import numpy as np



input_path = "$file"

output_path = "$output"



# Load image

image = cv2.imread(input_path)

if image is None:

    raise ValueError("Failed to load image")



# Convert to BGRA for transparency

image_rgba = cv2.cvtColor(image, cv2.COLOR_BGR2BGRA)



# Create white mask (to make transparent)

lower_white = np.array([200, 200, 200], dtype=np.uint8)

upper_white = np.array([255, 255, 255], dtype=np.uint8)

white_mask = cv2.inRange(image[:, :, :3], lower_white, upper_white)

image_rgba[white_mask == 255] = [0, 0, 0, 0]



# Now detect the character (subject) area

gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

inverted = cv2.bitwise_not(gray)

_, subject_mask = cv2.threshold(inverted, 30, 255, cv2.THRESH_BINARY)



# Clean mask

kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))

subject_mask = cv2.morphologyEx(subject_mask, cv2.MORPH_OPEN, kernel)

subject_mask = cv2.morphologyEx(subject_mask, cv2.MORPH_CLOSE, kernel)



# Create light grey-yellow background (BGRA: 220, 240, 180, 255)

matte_color = np.array([180, 240, 220, 255], dtype=np.uint8)  # B, G, R, A

matte = np.zeros_like(image_rgba)

matte[:, :] = matte_color



# Mask the matte to only appear behind the subject

for c in range(4):

    matte[:, :, c] = matte[:, :, c] * (subject_mask // 255)



# Composite: subject over masked matte

alpha = image_rgba[:, :, 3:] / 255.0

foreground = image_rgba[:, :, :3]

background = matte[:, :, :3]

composite_rgb = (foreground * alpha + background * (1 - alpha)).astype(np.uint8)



# Create final alpha channel: only where subject_mask exists

final_alpha = np.where(subject_mask > 0, 255, 0).astype(np.uint8)

final_image = cv2.merge((composite_rgb, final_alpha))



# Save result as PNG

cv2.imwrite(output_path, final_image)

print(f"✅ Saved: {output_path}")

EOF



done



echo "✅ Done — character backgrounds now filled internally with light yellow-grey, outside transparent."
